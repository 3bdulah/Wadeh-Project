import os  # Importing os to access environment variables
import re
from flask import Flask, render_template, request, jsonify, session
import requests
import random
import json
from dotenv import load_dotenv

# Load environment variables from a .env file
load_dotenv()

# Initialize the Flask application
app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY')  # Secret key for session management

# Configuration variables sourced from environment
MODEL_ID = os.getenv("MODEL_ID")  # Model ID for the Arabic grammar model
API_URL = os.getenv("API_URL")  # API endpoint for text generation
IAM_TOKEN_URL = os.getenv("IAM_TOKEN_URL")  # URL to obtain an access token
API_KEY = os.getenv("API_KEY")  # IBM API key for authorization
PROJECT_ID = os.getenv("PROJECT_ID")  # Project ID for IBM Watsonx usage

# Function to retrieve an access token from IBM
def get_access_token():
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    data = {
        "grant_type": "urn:ibm:params:oauth:grant-type:apikey",
        "apikey": API_KEY
    }

    try:
        response = requests.post(IAM_TOKEN_URL, headers=headers, data=data)
        response.raise_for_status()  # Raise an error for HTTP codes 4xx/5xx
        return response.json()["access_token"]
    except requests.exceptions.RequestException as e:
        print(f"Error getting access token: {e}")
        return None

# Function to check if the text is mostly in Arabic
def is_mostly_arabic(text):
    arabic_chars = re.findall(r'[\u0600-\u06FF]', text)
    return len(arabic_chars) > len(text) * 0.5

# Function to add the analyzed sentence and result to session history
def add_to_history(sentence, result):
    if 'history' not in session:
        session['history'] = []
    session['history'].append({'sentence': sentence, 'result': result})

# Route to retrieve session history
@app.route('/history', methods=['GET'])
def get_history():
    history = session.get('history', [])
    return jsonify(history)

# Function to validate and analyze a sentence's structure
def validate_and_analyze_sentence(sentence):
    # Check if the sentence contains enough Arabic text
    if not is_mostly_arabic(sentence):
        return {"error": "ุงูุฌููุฉ ุชุญุชูู ุนูู ุฃุญุฑู ุบูุฑ ุนุฑุจูุฉ ุฃู ุบูุฑ ูููููุฉ. ๐"}

    access_token = get_access_token()
    if not access_token:
        return {"error": "Failed to obtain access token. Please check the API key and network connection."}

    # Prompt to validate the sentence
    validation_prompt = (
        "ุฑุฌุงุกู ูู ุจุชุญููู ุงูุฌููุฉ ุงูุชุงููุฉ ุฏูู ุฃู ุชูููุฑ ุฅุถุงูู.ููุง ุชูุฏู ุฃู ูุนูููุงุช ุฅุถุงููุฉ "
        "ูุง ุชูุชู ุจุงูููุทู ุฃู ุงููุนููุ ููุท ูู ุจุงูุชุญููู ุงููุญูู ููุง ูู:\n\n"
        "ูุซุงู 1: ุฐูุจ ุฃุญูุฏ ุฅูู ุงููุฏุฑุณุฉ.\n"
        "ุงูุฅุนุฑุงุจ: ุฐูุจ: ูุนู ูุงุถู ูุจูู ุนูู ุงููุชุญุ ุฃุญูุฏ: ูุงุนู ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ "
        "ุฅูู: ุญุฑู ุฌุฑุ ุงููุฏุฑุณุฉ: ุงุณู ูุฌุฑูุฑ ูุนูุงูุฉ ุฌุฑู ุงููุณุฑุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑู.\n\n"
        "ูุซุงู 2: ุงูุณูุงุก ุตุงููุฉ ุงูููู.\n"
        "ุงูุฅุนุฑุงุจ: ุงูุณูุงุก: ูุจุชุฏุฃ ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ุตุงููุฉ: ุฎุจุฑ ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ "
        "ุงูููู: ุธุฑู ุฒูุงู ููุตูุจ ูุนูุงูุฉ ูุตุจู ุงููุชุญุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑู.\n\n"
        "ูุซุงู 3: ุงูุทุงูุจ ูุฐุงูุฑ ุฏุฑูุณู ุจุฌุฏูุฉ.\n"
        "ุงูุฅุนุฑุงุจ: ุงูุทุงูุจ: ูุจุชุฏุฃ ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ูุฐุงูุฑ: ูุนู ูุถุงุฑุน ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ "
        "ุฏุฑูุณู: ููุนูู ุจู ููุตูุจ ูุนูุงูุฉ ูุตุจู ุงููุชุญุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ูุงููุงุก: ุถููุฑ ูุชุตู ูู ูุญู ุฌุฑ ุจุงูุฅุถุงูุฉุ ุจุฌุฏูุฉ: ุฌุงุฑ ููุฌุฑูุฑ.\n\n"
        "ูุซุงู 4: ุงูููุฑ ูุถูุก ุงูุณูุงุก ูููุงู.\n"
        "ุงูุฅุนุฑุงุจ: ุงูููุฑ: ูุจุชุฏุฃ ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ูุถูุก: ูุนู ูุถุงุฑุน ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ "
        "ุงูุณูุงุก: ููุนูู ุจู ููุตูุจ ูุนูุงูุฉ ูุตุจู ุงููุชุญุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ูููุงู: ุธุฑู ุฒูุงู ููุตูุจ ูุนูุงูุฉ ูุตุจู ุงููุชุญุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑู.\n\n"
        f"ุงูุฌููุฉ: {sentence}"
    )

    body = {
        "input": validation_prompt,
        "parameters": {
            "decoding_method": "greedy",
            "max_new_tokens": 50,
            "repetition_penalty": 1.1
        },
        "model_id": MODEL_ID,
        "project_id": PROJECT_ID
    }

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    response = requests.post(API_URL, headers=headers, json=body)

    if response.status_code != 200:
        return {"error": f"ูู ูุดููุฉ: {response.text}"}

    validation_result = response.json().get('results', [{}])[0].get('generated_text', '')

    if "ุบูุฑ ููุชููุฉ" in validation_result or "ุบูุฑ ูููููุฉ" in validation_result:
        return {"error": "ุงูุญููููููููุ ุงูุฌููุฉ ูุตูุฑุฉ ุจุฒูุงุฏุฉ ุฃู ูููุง ุฑููุฒ ุบูุฑ ูููููุฉ. ๐"}

    return analyze_sentence_with_allam(sentence)

# Function to analyze a sentence using the IBM model
def analyze_sentence_with_allam(sentence):
    access_token = get_access_token()
    if not access_token:
        return {"error": "Failed to obtain access token. Please check the API key and network connection."}

    body = {
        "input": (
            "ุฑุฌุงุกู ูู ุจุฅุนุฑุงุจ ูุงูู ููุฌููุฉ ุงูุชุงููุฉ ููุท ููุง ุชูุฏู ุฃู ูุนูููุงุช ุฅุถุงููุฉ:\n\n"
            "ูุซุงู 1: ุฐูุจ ุฃุญูุฏ ุฅูู ุงููุฏุฑุณุฉ.\n"
            "ุงูุฅุนุฑุงุจ: ุฐูุจ: ูุนู ูุงุถู ูุจูู ุนูู ุงููุชุญุ ุฃุญูุฏ: ูุงุนู ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ "
            "ุฅูู: ุญุฑู ุฌุฑุ ุงููุฏุฑุณุฉ: ุงุณู ูุฌุฑูุฑ ูุนูุงูุฉ ุฌุฑู ุงููุณุฑุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑู.\n\n"
            "ูุซุงู 2: ุงูุณูุงุก ุตุงููุฉ ุงูููู.\n"
            "ุงูุฅุนุฑุงุจ: ุงูุณูุงุก: ูุจุชุฏุฃ ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ุตุงููุฉ: ุฎุจุฑ ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ "
            "ุงูููู: ุธุฑู ุฒูุงู ููุตูุจ ูุนูุงูุฉ ูุตุจู ุงููุชุญุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑู.\n\n"
            "ูุซุงู 3: ุงูุทุงูุจ ูุฐุงูุฑ ุฏุฑูุณู ุจุฌุฏูุฉ.\n"
            "ุงูุฅุนุฑุงุจ: ุงูุทุงูุจ: ูุจุชุฏุฃ ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ูุฐุงูุฑ: ูุนู ูุถุงุฑุน ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ "
            "ุฏุฑูุณู: ููุนูู ุจู ููุตูุจ ูุนูุงูุฉ ูุตุจู ุงููุชุญุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ูุงููุงุก: ุถููุฑ ูุชุตู ูู ูุญู ุฌุฑ ุจุงูุฅุถุงูุฉุ ุจุฌุฏูุฉ: ุฌุงุฑ ููุฌุฑูุฑ.\n\n"
            "ูุซุงู 4: ุงูููุฑ ูุถูุก ุงูุณูุงุก ูููุงู.\n"
            "ุงูุฅุนุฑุงุจ: ุงูููุฑ: ูุจุชุฏุฃ ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ูุถูุก: ูุนู ูุถุงุฑุน ูุฑููุน ูุนูุงูุฉ ุฑูุนู ุงูุถูุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ "
            "ุงูุณูุงุก: ููุนูู ุจู ููุตูุจ ูุนูุงูุฉ ูุตุจู ุงููุชุญุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑูุ ูููุงู: ุธุฑู ุฒูุงู ููุตูุจ ูุนูุงูุฉ ูุตุจู ุงููุชุญุฉ ุงูุธุงูุฑุฉ ุนูู ุขุฎุฑู.\n\n"
            f"ุงูุฌููุฉ: {sentence}\nุงูุฅุนุฑุงุจ:"
        ),
        "parameters": {
            "decoding_method": "greedy",
            "max_new_tokens": 300,
            "repetition_penalty": 1.2
        },
        "model_id": MODEL_ID,
        "project_id": PROJECT_ID
    }

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    response = requests.post(API_URL, headers=headers, json=body)

    if response.status_code != 200:
        return {"error": f"ูู ูุดููุฉ: {response.text}"}

    result = response.json().get('results', [{}])[0].get('generated_text', '').strip()

    if not result:
        result = "ุงูุฌููุฉ ุบูุฑ ุตุญูุญุฉ ุฃู ูุง ูููู ุชุญููููุง. ุฌุฑุจ ุฌููุฉ ุซุงููุฉ! ๐"

    return {"result": result}

# Route to render the main page
@app.route('/')
def index():
    return render_template('index.html')

# Route to analyze a sentence submitted by the user
@app.route('/analyze', methods=['POST'])
def analyze_sentence():
    sentence = request.json.get('sentence')

    if not sentence or len(sentence.strip()) < 2:
        return jsonify({'error': 'ุงูุฌููุฉ ูุตูุฑุฉ ุฌุฏูุง. ๐'}), 400

    analysis = validate_and_analyze_sentence(sentence)

    if 'error' in analysis:
        return jsonify({'error': analysis['error']}), 400

    add_to_history(sentence, analysis['result'])
    return jsonify(analysis)

# Random sentences for testing analysis
RANDOM_SENTENCES = [
    "ุฐูุจ ุฃุญูุฏ ุฅูู ุงููุฏุฑุณุฉ.",
    "ุงูุณูุงุฑุฉ ุณุฑูุนุฉ ุฌุฏุงู.",
    "ุงูุทูู ููุนุจ ุจุงููุฑุฉ.",
    "ุงูุณูุงุก ุตุงููุฉ ุงูููู.",
    "ุงููุทุท ุชูุนุจ ูู ุงูุญุฏููุฉ.",
    "ุงููุนูู ูุดุฑุญ ุงูุฏุฑุณ ุจูุถูุญ.",
    "ุฃููุชู ุชูุงุญุฉ ูุฐูุฐุฉ.",
    "ุงูุฒููุฑ ุฌูููุฉ ูู ุงูุฑุจูุน.",
    "ูุฌุญุชู ูู ุงูุงูุชุญุงู ุจูุถู ุงููู.",
    "ุฃุญุจ ุงููุฑุงุกุฉ ูู ุงูุตุจุงุญ.",
    "ุงูุฌูุฏู ูุญูู ุงููุทู.",
    "ุงูุดูุณ ูุดุฑูุฉ ูู ุงูุณูุงุก.",
    "ุงุดุชุฑูุชู ูุชุงุจูุง ุฌุฏูุฏูุง ูู ุงูููุชุจุฉ.",
    "ุงููููุฏุณ ูุจูู ุงููุจุงูู ุงูุนุงููุฉ.",
    "ุงูุฃู ุชูุชู ุจุฃุทูุงููุง.",
    "ุงูุทุจูุจ ูุนุงูุฌ ุงููุฑุถู.",
    "ุงูุชุงุฌุฑ ูุจูุน ุงูุจุถุงุฆุน ูู ุงูุณูู.",
    "ุงูุฑูุงุถู ูุฌุฑู ุจุณุฑุนุฉ.",
    "ุงูุนุตููุฑ ูุบุฑุฏ ุนูู ุงูุดุฌุฑุฉ."
]

# Route to get a random sentence
@app.route('/random-sentence', methods=['GET'])
def random_sentence():
    sentence = random.choice(RANDOM_SENTENCES)
    return jsonify({'sentence': sentence})

# Quiz questions for grammar practice
QUIZ_QUESTIONS = [
    {
        'question': "ุงูุทูุงุจ ูุฏุฑุณูู ุจุฌุฏูุฉ.",
        'options': ["ูุจุชุฏุฃ", "ุฎุจุฑ", "ูุงุนู"],
        'correct': "ูุจุชุฏุฃ",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงูุทูุงุจ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ูุฑุฃุชู ูุชุจูุง ูุซูุฑุฉ.",
        'options': ["ููุนูู ุจู", "ูุงุนู", "ุญุงู"],
        'correct': "ููุนูู ุจู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ูุชุจูุง' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูุจูุงุช ูุดูุทุงุช.",
        'options': ["ูุจุชุฏุฃ", "ุฎุจุฑ", "ุฌูุน ูุคูุซ ุณุงูู"],
        'correct': "ุฌูุน ูุคูุซ ุณุงูู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงูุจูุงุช' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงููุนููุงุช ูุงูุฑุงุช ูู ุงูุชุฏุฑูุณ.",
        'options': ["ูุจุชุฏุฃ", "ุฎุจุฑ", "ุฌูุน ูุคูุซ ุณุงูู"],
        'correct': "ุฌูุน ูุคูุซ ุณุงูู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงููุนููุงุช' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงููุงุนู ูู ุงูุฌููุฉ ูุฑูุน ุจุงูู...",
        'options': ["ุงูุถูุฉ", "ุงููุชุญุฉ", "ุงููุณุฑุฉ"],
        'correct': "ุงูุถูุฉ",
        'instruction': "ูุง ูู ุนูุงูุฉ ุฑูุน ุงููุงุนูุ"
    },
    {
        'question': "ุงูููุนูู ุจู ูู ุงูุฌููุฉ ููุตุจ ุจุงูู...",
        'options': ["ุงููุชุญุฉ", "ุงูุถูุฉ", "ุงููุณุฑุฉ"],
        'correct': "ุงููุชุญุฉ",
        'instruction': "ูุง ูู ุนูุงูุฉ ูุตุจ ุงูููุนูู ุจูุ"
    },
    {
        'question': "ุงููุถุงู ุฅููู ูุฌุฑ ุจุงูู...",
        'options': ["ุงููุณุฑุฉ", "ุงูุถูุฉ", "ุงููุชุญุฉ"],
        'correct': "ุงููุณุฑุฉ",
        'instruction': "ูุง ูู ุนูุงูุฉ ุฌุฑ ุงููุถุงู ุฅูููุ"
    },
    {
        'question': "ุงุฌุชูุฏุชู ูู ุฏุฑุงุณุชู. ูุง ูู ุฅุนุฑุงุจ 'ุงุฌุชูุฏุชู'ุ",
        'options': ["ูุนู ูุงุถู", "ูุนู ูุถุงุฑุน", "ุงุณู"],
        'correct': "ูุนู ูุงุถู",
        'instruction': "ูุง ูู ููุน ุงููุนู 'ุงุฌุชูุฏุชู' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูุตูู ุญุงุฑ ูู ุงูุฑูุงุถ. ูุง ูู ุฅุนุฑุงุจ 'ุญุงุฑ'ุ",
        'options': ["ูุจุชุฏุฃ", "ุฎุจุฑ", "ุตูุฉ"],
        'correct': "ุฎุจุฑ",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุญุงุฑ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ูููุฑู ุงูุฑุฌู ุถููู. ูุง ูู ุฅุนุฑุงุจ 'ุงูุฑุฌู'ุ",
        'options': ["ูุจุชุฏุฃ", "ูุงุนู", "ููุนูู ุจู"],
        'correct': "ูุงุนู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงูุฑุฌู' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูุทุงูุจ ุงููุฌุชูุฏ ูููุฒ. ูุง ูู ุฅุนุฑุงุจ 'ุงููุฌุชูุฏ'ุ",
        'options': ["ูุนุช", "ูุจุชุฏุฃ", "ุฎุจุฑ"],
        'correct': "ูุนุช",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงููุฌุชูุฏ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูููุฑุถุงุช ูุฌุชูุฏุงุช ูู ุงูุนูู.",
        'options': ["ูุจุชุฏุฃ", "ุฎุจุฑ", "ุฌูุน ูุคูุซ ุณุงูู"],
        'correct': "ุฌูุน ูุคูุซ ุณุงูู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงูููุฑุถุงุช' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูุทุงูุจุงุช ูุญุถุฑู ุงูุฏุฑูุณ ุจุงูุชุธุงู.",
        'options': ["ูุจุชุฏุฃ", "ุฌูุน ูุคูุซ ุณุงูู", "ููุนูู ุจู"],
        'correct': "ุฌูุน ูุคูุซ ุณุงูู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงูุทุงูุจุงุช' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงููุฏุฑุณุฉ ุงููุจูุฑุฉ ุฌูููุฉ.",
        'options': ["ูุจุชุฏุฃ", "ุตูุฉ", "ููุนูู ุจู"],
        'correct': "ูุจุชุฏุฃ",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงููุฏุฑุณุฉ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูุทุงุฆุฑุฉ ุณุฑูุนุฉ ุฌุฏูุง.",
        'options': ["ูุจุชุฏุฃ", "ุฎุจุฑ", "ูุงุนู"],
        'correct': "ูุจุชุฏุฃ",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงูุทุงุฆุฑุฉ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูุทุงูุจ ุงููุจุฏุน ููุฌุญ ุฏุงุฆููุง.",
        'options': ["ูุจุชุฏุฃ", "ูุนุช", "ููุนูู ุจู"],
        'correct': "ูุจุชุฏุฃ",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงูุทุงูุจ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุฑุฃูุชู ุงููุนููุฉ ูู ุงููุตู.",
        'options': ["ูุงุนู", "ูุถุงู", "ููุนูู ุจู"],
        'correct': "ููุนูู ุจู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงููุนููุฉ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุฌุงุกุช ุงููุณุงุก ุฅูู ุงูุงุฌุชูุงุน.",
        'options': ["ูุจุชุฏุฃ", "ุฌูุน ูุคูุซ ุณุงูู", "ุฎุจุฑ"],
        'correct': "ุฌูุน ูุคูุซ ุณุงูู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงููุณุงุก' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงููุซูู ูู ุงูุฌููุฉ ููุฑูุน ุจุงูู...",
        'options': ["ุงูุฃูู", "ุงูุถูุฉ", "ุงููุชุญุฉ"],
        'correct': "ุงูุฃูู",
        'instruction': "ูุง ูู ุนูุงูุฉ ุฑูุน ุงููุซููุ"
    },
    {
        'question': "ุงูุจูุงุช ูุฌุชูุฏุงุช. ูุง ูู ุฅุนุฑุงุจ 'ูุฌุชูุฏุงุช'ุ",
        'options': ["ูุนุช", "ุฌูุน ูุคูุซ ุณุงูู", "ุญุงู"],
        'correct': "ุฌูุน ูุคูุซ ุณุงูู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ูุฌุชูุฏุงุช' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงุดุชุฑูุชู ุนุดุฑ ูุชุจ. ูุง ูู ุฅุนุฑุงุจ 'ูุชุจ'ุ",
        'options': ["ูุถุงู", "ุชูููุฒ", "ููุนูู ุจู"],
        'correct': "ุชูููุฒ",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ูุชุจ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูุชูููุฐุงู ูุฌุชูุฏุงู. ูุง ูู ุฅุนุฑุงุจ 'ุงูุชูููุฐุงู'ุ",
        'options': ["ูุจุชุฏุฃ", "ูุซูู", "ูุถุงู"],
        'correct': "ูุซูู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุงูุชูููุฐุงู' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ูุงุจูุชู ูุฑููู ูู ุงูุณูู.",
        'options': ["ููููุน ูู ุงูุตุฑู", "ููุนูู ุจู", "ุญุงู"],
        'correct': "ููููุน ูู ุงูุตุฑู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ูุฑูู' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุถุฑุจุชู ุถุฑุจูุง ุดุฏูุฏูุง. ูุง ูู ุฅุนุฑุงุจ 'ุถุฑุจูุง'ุ",
        'options': ["ููุนูู ูุทูู", "ููุนูู ุจู", "ุญุงู"],
        'correct': "ููุนูู ูุทูู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุถุฑุจูุง' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ูุงูุช ุงูุณูุงุก ุตุงููุฉ. ูุง ูู ุฅุนุฑุงุจ 'ุตุงููุฉ'ุ",
        'options': ["ุฎุจุฑ ูุงู", "ุญุงู", "ุตูุฉ"],
        'correct': "ุฎุจุฑ ูุงู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุตุงููุฉ' ูู ูุฐู ุงูุฌููุฉุ"
    },
    {
        'question': "ุงูุฌููุฉ: 'ูุงูุช ุงููุชุงุฉ ุณุนูุฏุฉ'. ูุง ูู ุฅุนุฑุงุจ 'ุณุนูุฏุฉ'ุ",
        'options': ["ุญุงู", "ุฎุจุฑ ูุงู", "ูุนุช"],
        'correct': "ุฎุจุฑ ูุงู",
        'instruction': "ูุง ูู ุฅุนุฑุงุจ 'ุณุนูุฏุฉ' ูู ูุฐู ุงูุฌููุฉุ"
    }
]

# Route to get a quiz question
@app.route('/get-quiz-question', methods=['GET'])
def get_quiz_question():
    question = random.choice(QUIZ_QUESTIONS)
    return jsonify(question)

# Route to check the submitted quiz answer
@app.route('/submit-quiz-answer', methods=['POST'])
def submit_quiz_answer():
    selected_answer = request.json.get('answer')
    correct_answer = request.json.get('correct')

    if selected_answer == correct_answer:
        return jsonify({'feedback': 'ุฅุฌุงุจุชู ุตุญูุญุฉ! ๐'})
    else:
        return jsonify({'feedback': 'ุฅุฌุงุจุชู ุฎุงุทุฆุฉุ ุญุงูู ูุฑุฉ ุฃุฎุฑู. ๐'})

# Start the Flask application
if __name__ == '__main__':
    app.run(debug=True)